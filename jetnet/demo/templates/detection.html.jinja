{% extends "base.html.jinja" %}
{% block setup %}

{% endblock %}
{% block output %}
    output = data_decoded["output"];
    
    overlayLayer.find("Line").forEach((line) => {line.destroy();});
    overlayLayer.find("Text").forEach((text) => {text.destroy();});
    for (let i = 0; i < output.detections.length; i++) {
        var p = output.detections[i];
        if ("mask" in p) {
            var rle = Module.make_rle();
            p["mask"].counts.forEach((x) => {rle.counts.push_back(x)});
            p["mask"].values.forEach((x) => {rle.values.push_back(x)});
            var size = p["mask"]["size"];
            rle.size = size[0] * size[1];
            var colormap = Module.make_binary_colormap();
            var rgba_data = Module.rle_to_rgba_data(rle, colormap).get();
            rgba_data = Uint8ClampedArray.from(rgba_data);
            var imageData = new ImageData(
                rgba_data,
                size[1], size[0]
            );
            var canvas = document.getElementById("display");
            var ctx = canvas.getContext("2d");
            ctx.putImageData(imageData, 0, 0);
        }
        var pts = p.boundary.points;
        var points = [];
        for (let j = 0; j < pts.length; j++) {
            points.push(pts[j].x, pts[j].y);
        }
        var poly = new Konva.Line({
            points: points,
            closed: true,
            fill: '#76b900',
            opacity: 0.25
        })
        var outline = new Konva.Line({
            points: points,
            closed: true,
            stroke: 'white',
            strokeWidth: 2
        })
        var text = new Konva.Text({
            x: pts[0].x,
            y: pts[0].y,
            text: p.classification.label,
            fontSize: 16,
            fontFamily: 'Calibri',
            fill: '#76b900',
            stroke: 'white',
            strokeWidth: 1
        });
        overlayLayer.add(poly);
        overlayLayer.add(outline);
        overlayLayer.add(text);
    }
    overlayLayer.draw();
{% endblock %}